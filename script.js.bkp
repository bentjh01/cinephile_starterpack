// MINIMAP

// let minimap = document.createElement('div');
// let minimapSize = document.createElement('div');
// let viewer = document.createElement('div');
// let minimapContent = document.createElement('iframe');
// let scale = 0.1;
// let realScale;

// minimap.className = 'minimap__container';
// minimapSize.className = 'minimap__size';
// viewer.className = 'minimap__viewer';
// minimapContent.className = 'minimap__content';

// minimap.append(minimapSize, viewer, minimapContent);w
// document.body.appendChild(minimap);

// let html = document.documentElement.outerHTML.replace(/<script\b[^<]*(?:(?!<\/script>)<[^<]*)*<\/script>/gi, '');

// let iframeDoc = minimapContent.contentWindow.document;

// iframeDoc.open();
// iframeDoc.write(html);
// iframeDoc.close();


// function getDimensions(){
//     let bodyWidth = document.body.clientWidth;
//     let bodyRatio = document.body.clientHeight / bodyWidth;
//     let winRatio = window.innerHeight / window.innerWidth;

//     minimap.style.width = '15%';

//     realScale = minimap.clientWidth / bodyWidth;

//     minimapSize.style.paddingTop = `${bodyRatio * 100}%`
//     viewer.style.paddingTop = `${winRatio * 100}%`;

//     minimapContent.style.transform = `scale(${realScale})`;
//     minimapContent.style.width = `${(100 / realScale)}%`
//     minimapContent.style.height = `${(100 / realScale)}%`
// }

// function trackScroll(){
//     viewer.style.transform = `translateY(${window.scrollY * realScale}px)`
// }

// getDimensions()
// window.addEventListener('scroll', trackScroll)
// window.addEventListener('resize', getDimensions)

// OTHER

// const track = document.getElementById("image-track");

// const handleOnDown = e => track.dataset.mouseDownAt = e.clientX;

// const handleOnUp = () => {
//   track.dataset.mouseDownAt = "0";  
//   track.dataset.prevPercentage = track.dataset.percentage;
// }

// const handleOnMove = e => {
//   if(track.dataset.mouseDownAt === "0") return;
  
//   const mouseDelta = parseFloat(track.dataset.mouseDownAt) - e.clientX,
//         maxDelta = window.innerWidth / 2;
  
//   const percentage = (mouseDelta / maxDelta) * -100,
//         nextPercentageUnconstrained = parseFloat(track.dataset.prevPercentage) + percentage,
//         nextPercentage = Math.max(Math.min(nextPercentageUnconstrained, 0), -100);
  
//   track.dataset.percentage = nextPercentage;
  
//   track.animate({
//     transform: `translate(${nextPercentage}%, -50%)`
//   }, { duration: 1200, fill: "forwards" });
  
//   for(const image of track.getElementsByClassName("image")) {
//     image.animate({
//       objectPosition: `${100 + nextPercentage}% center`
//     }, { duration: 1200, fill: "forwards" });
//   }
// }

// /* -- Had to add extra lines for touch events -- */

// window.onmousedown = e => handleOnDown(e);

// window.ontouchstart = e => handleOnDown(e.touches[0]);

// window.onmouseup = e => handleOnUp(e);

// window.ontouchend = e => handleOnUp(e.touches[0]);

// window.onmousemove = e => handleOnMove(e);

// window.ontouchmove = e => handleOnMove(e.touches[0]);